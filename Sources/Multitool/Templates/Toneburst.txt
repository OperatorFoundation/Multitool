//
//  {{toneburst.name}}.swift
//
//

import Foundation

import Chord
import Datable
import Ghostwriter
import ReplicantSwift
import TransmissionAsync

public enum {{toneburst.name}}Mode: String, Codable
{
    {% for mode in toneburst.modes %}case {{mode.name}}
    {% endfor %}
}

public class {{toneburst.name}}: ToneBurst
{
    let mode: {{toneburst.name}}Mode
    
    enum CodingKeys: String, CodingKey
    {
        case mode
    }
    
    public init(_ mode: {{toneburst.name}}Mode)
    {
        self.mode = mode
        super.init()
    }
    
    required init(from decoder: any Decoder) throws
    {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        let superDecoder = try container.superDecoder()
        
        self.mode = try container.decode({{toneburst.name}}Mode.self, forKey: .mode)
        try super.init(from: superDecoder)
    }

    public override func perform(connection: TransmissionAsync.AsyncConnection) async throws
    {
        let instance = {{toneburst.name}}Instance(self.mode, connection)
        try await instance.perform()
    }
    
    public override func encode(to encoder: any Encoder) throws
    {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.mode, forKey: .mode)
        let superEncoder = container.superEncoder()
        try super.encode(to: superEncoder)
    }
}

public struct {{toneburst.name}}Instance
{
    let connection: TransmissionAsync.AsyncConnection
    let mode: {{toneburst.name}}Mode

    public init(_ mode: {{toneburst.name}}Mode, _ connection: TransmissionAsync.AsyncConnection)
    {
        self.mode = mode
        self.connection = connection
    }

    public func perform() async throws
    {
        switch mode
        {
            {% for mode in toneburst.modes %}
            case .{{mode.name}}:
                try await handle{{mode.name}}()
            {% endfor %}
        }
    }
    
    func listen(structuredText: StructuredText, maxSize: Int = 255) async throws -> MatchResult
    {
        var buffer = Data()
        while buffer.count < maxSize
        {
            let byte = try await connection.readSize(1)

            buffer.append(byte)

            guard let string = String(data: buffer, encoding: .utf8) else
            {
                // This could fail because we're in the middle of a UTF8 rune.
                continue
            }

            let result = structuredText.match(string: string)
            switch result
            {
                case .FAILURE:
                    return result

                case .SHORT:
                    continue

                case .SUCCESS(_):
                    return result
            }
        }
        
        throw {{toneburst.name}}Error.maxSizeReached
    }
    
    func speak(structuredText: StructuredText) async throws
    {
        do
        {
            let string = structuredText.string
            try await connection.writeString(string: string)
        }
        catch
        {
            print(error)
            throw {{toneburst.name}}Error.writeFailed
        }
    }
    
{% for mode in toneburst.modes %}
{{mode.function}}
{% endfor %}
}

public enum {{toneburst.name}}Error: Error
{
    case timeout
    case connectionClosed
    case writeFailed
    case readFailed
    case listenFailed
    case speakFailed
    case maxSizeReached
}
