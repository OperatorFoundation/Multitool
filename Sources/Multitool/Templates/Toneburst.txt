//
//  {{toneburst.name}}.swift
//
//
//  Created by Mafalda on 3/5/24.
//

import Foundation

import Chord
import Datable
import Ghostwriter
import ReplicantSwift
import TransmissionAsync

public enum {{toneburst.name}}Mode: String, Codable
{
    {% for mode in toneburst.modes %}
    case {{mode.name}}
    {% endfor %}
}

public class {{toneburst.name}}: ToneBurstAsync, Codable
{
    public var type: ReplicantSwift.ToneBurstType = .starburst
    
    let mode: {{toneburst.name}}Mode

    public init(_ mode: {{toneburst.name}}Mode)
    {
        self.mode = mode
    }

    public func perform(connection: TransmissionAsync.AsyncConnection) async throws
    {
        let instance = {{toneburst.name}}Instance(self.mode, connection)
        try await instance.perform()
    }
}

public struct {{toneburst.name}}Instance
{
    let connection: TransmissionAsync.AsyncConnection
    let mode: {{toneburst.name}}Mode

    public init(_ mode: {{toneburst.name}}Mode, _ connection: TransmissionAsync.AsyncConnection)
    {
        self.mode = mode
        self.connection = connection
    }

    public func perform() async throws
    {
        switch mode
        {
            {% for mode in toneburst.modes %}
            case .{{mode.name}}:
                try await handle{{mode.name}}()
            {% endfor %}
        }
    }
{% for mode in toneburst.modes %}
{{mode.function}}
{% endfor %}
}

public enum {{toneburst.name}}Error: Error
{
    case timeout
    case connectionClosed
    case writeFailed
    case readFailed
    case listenFailed
    case speakFailed
    case maxSizeReached
}
