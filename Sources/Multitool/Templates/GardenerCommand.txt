//
//  {{command}}.swift
//
//
//  Code generated by Multitool on {{creationDate}}.
//

#if os(iOS) || os(watchOS) || os(tvOS)
#else
import Foundation

import Gardener

public class {{command|capitalize}}
{
    var command: Command

    public init?()
    {
        command = Command()
    }

    public func cd(_ path: String) -> Bool
    {
        return command.cd(path)
    }

    {% for subcommand in subcommands %}
    public func build(
        {% for argument in subcommand.arguments %}
            {% if argument.optional %}
                {{argument.name}}: String? = nil,
            {% else %}
                {{argument.name}}: String,
            {% endif %}
        {% endfor %}
        options: {{command|capitalize}}{{subcommand.name|capitalize}}Options? = nil
    ) throws
    {
        var commandArguments = ["{{command}}"]

        {% for argument in subcommand.arguments %}
            {% if argument.optional %}
                if let {{argument.name}}
                {
                    commandArguments.append({{argument.name}})
                }
            {% else %}
                commandArguments.append({{argument.name}})
            {% endif %}
        {% endfor %}

        {% for option in subcommand.options %}
            if let {{option}} = options.{{option}}
            {
                commandArguments.append({{option}})
            }
        {% endfor %}

        guard let (errorCode, stdout, stderr) = command.run("{{command}}", commandArguments) else
        {
            throw {{command|capitalize}}Error.commandNotFound
        }

        guard errorCode == 0 else
        {
            throw {{command|capitalize}}Error.commandFailed(errorCode, stdout.string, stderr.string)
        }
    }
    {% endfor %}

public enum {{name}}Error: Error
{
    case commandNotFound
    case commandFailed(Int32, String, String)
}
#endif

